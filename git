This is demonstration of git and github fundamnetals course by google.
?/
22HEL2231
Branch
A branch is a pointer to a partcilar commit.
The default branch that git creates for you when a new repository is initialised is called master.
We can use git branch command to list, createc delete andanipulate branches.
Merging
The term that Git uses for combining branched data and hitory together.
We use git checkout to check out the latest snapshot for both the files and for branches.
Git uses two different algorithms to perform a merge: fast-forward and three-way merge

Merging
The term git uses for combining branched data and history together.
Git uses two  different algorithms to performa merge: fast-forward and three way merge.

Branch:A pointer to  a particular commit,  representing an independent line of development in a  project.
Commit ID: An identifier next to the word  commit in the log
Fast-Forward merge:A merge when all the commits in the checked out branch are also in  the branch that's  being merged
Head: This points  to  the top of the branch that is being used
Master: The default branch that Git creates for  when a new repository initialized, commonly used to placed approved pieces of a project
Merge Conflict: This occurs when the changes are made on the same part of the same  file, and Git won't know how to merge those changes.
Rollback: The act of reverting changes made to a software to a  previous state
Three-way merge: A merge when the  snapshots at the two branch tips with the most recent common ancestor, the  commit befoe  the divergence.

What is secure shell?

Secure shell is a robust protocol for connecting to servers remotely.In the realm  of remote server access, security is going to be more and more
important to  keep your information safe. Secure shell  is primarily used for logging in to Linux  Servers, Unix Servers and certain networking
equipment such routers.

ALternatives to SSH

SSH provides a shield against prying eyes, but how does it compare to alternatives?
Telnet is one popular alternative. Telnet exposes your type commands  including passwords, to anyone on the network  with right tools/
Although Transport Layer Security (TLS) encrypts data within browsers, SSH secures data in interactive terminal sessions or file transfers.
This encryption ensures that sensitive information remains confidential during communications.

Another alternative is virtual private networks (VPNs). VPNs also offer encryption but grant access to entire networks after connection. SSH adheres
to entire networks after connection. SSH adheres to the principle of least privilege, restricting users to specific hosts, enhancing security.
Another option might be remote-control software like VNC or GoToMyPC. They focus on graphical user interface and desktop experiences, which
may not align with most Linux servers that operate sans desktop environments.

Operation

SSH operates through two key componenets: the SSH server and the SSH client. The SSH server, residing on the target device, establishes secure network 
connections, undergoes mutual authentication, and intiates encrypted login sessions or file transfers.

Conversely, the SSH client establishes a connection to the SSH server, ensuring a secure interaction. The client makes requests, such as "log me in" or 
"copy this file."

SSH keys

In the SSH protocol, an access credential is known as an SSH key. It serves a similar purpose as usernames and passwords, although system administrators
and power users typically use the keys to automate procedures and achieve single sign-on.

Displaying the fingerprint of an SSH key is a useful way to verify that you're using the correct and that the remote server's key  hasn't been tampered
with. To display the finger print of an SSH key, you can use the SSH-keygen command-line tool.

Key takeaways


SSH prioritizes security in remote server access: Secure shell (SSH) is a robust and trusted protocol for securely connecting to servers remotely. It
finds widespread use in accessing Linux servers, Unix servers and specific networking equipmen, serving as a sheild against unauthorized access 
and breaches.

Comparing SSH with alternatives: When you compare SSH to alternatives like Telnet, its security superiority becomes  clear.
Telent exposes commands including passwords, to  potential  threats , whereas SSH's encryption guarantees confidentiality during interactions with the 
server and enables secure login or file copying.

Just like a password, the security of your SSH key is critical. Never share yout SSH private key with anyone or put SSH keys into your application code.
WIth someone having access to your information, they can gain unauthorized access by logging in and pretending to be you.

SSH Protocol
When discussing computer networks, the word "shell" refers to a program that provide an interface for accessing another operating system.\
With all the efforts put into keeping your machine secure , you certainly want security when its connected to another machine.
The secure shell network protocol, usually shorthanded to "SSH" , allows secure access to a computer over an unsecured network.

What is a protocol 
A protocol is a set of rules for how two things should communicate with each other. You may have heard the phrase "military protocol".  
which refers to the strict guidelines that govern communications between members of the armed forces in all situations. 
In the cae of computer protocols, these are usually published as an open standards so that any given protocol be implemented in various 
products. Having these protocols readily available to anyone can be implemented in various products. Having these protocols readily 
available to everyone means that any machine or network implements a given protocol should be able to communicate seamlessly with anything
else that supports the same protocol.

For a deeper dive into the secure shell.


The SSH protocol
So how does SSH secure the network?
It works on the principle of public-private key encryption. The client and the server each generate a strong encryption key  for any data 
that is passed between them. Then, that key   gets split in half with the client retaining  one portion and the server keeping the other.
It's a complex version of simple idea, really its not hard to imagine two people making up an encryption code and then tearing it half
for extra secrecy


In SSH, the keys are split between a public key, the public's half of the server's encryption key,  and the private key, which is stored
only on the server. This way, a user's machine can encrypt a message using the public key, but only the connnected server can decode it
because the server's private key will successfully decrypt the message. This waym if someone did intercept the network traffic, they still
could'nt read it because they don't have the server's private key. Using SSH, your keystrokes and the server's responses are completely 
secured.

Using the SSH protocol

The SSH protocol is commonly used for logging in to the servers remotely. While its primarily used for logging to linux and Uix servers, 
it is also used to encrypt file  transfers and to login to some  network equipment,  like routers.


Of course, your private key should never be transimtted to anyone else or shared anywhere. Most SSH clients will not connect if your
private ket is protected from other users. Because your private key is unique to you , it can serve as both authentication
and encryption, so the server don't need to ask you for password.

Besides providing a secure login shell on a remote server, SSH can be used for a  number of other functions including:

*Transfering files between client and server with SCP (Secure copy protocol) or SFTP (Secure File Transfer Protocol); for more
about these types of file transfers see the differences between SFTP and SCP.

*Forwarding network ports from server to client, or "tunneling".

*Relaying your login to yet another server behind  firewall, sometimes referred to as a "jump box" or "bastion host";for more on this
relaying method.

*Running graphical user interface (GUI) applications on a server but displaying them on a local client.


Configuring SSH
Computer ports are software based points where a network connection begins and ends. When using Secure Shell (SSH), the client connects
to the server on port 22. After the connection is made, the server sends its public key to the client. Then the client and the server 
negotiate a set of encryption rules, called an encryption algorithm, that both machines can support. When the two machines are in 
agreement on the encryption algorithm, the server starts a login shel for the user.
	  
	 Client Connect to server	
	 ------------------------->> SSH server
	 Server Sends public key to client
	 <<--------------------------
	  Server and client negotiate an
	  encryption algorithm
SSH Client <<------------------------>>
	   Secure connection established
	   <<------------------------->>


Configuring an SSH client
SSH configuration instructions will be differnet depending on your operating system and the implementation of SSH. On the other hand,
instructions for a client to generate its SSH key and connect to a server are more general. Let's look at how to set up the command line
OpenSSH client and connect to a remote host for  the first time.

You can use the same private/public key pair across all the machines you control. So if you have two laptops and one tablet, you could 
copy your key pair to all  of them. This can save you a few steps when llogging in from other devices.
Once SSH is set up, if the pubnlic key sent by the server ever changes, SSH will warn you that something malicious may have happened to 
the server and you will recieve an alert message that states that "Remote host identification has changed" or similar You should contact 
your systems administrator if you see this message. Although it's possile that the server has simply updated its key, it's also possible 
that someone is eavesdropping on communications between you and an application in order to steal information.

Optional features like port forwarding are often disabled by default because they up potential security holes if they are misused. You
may need these optional features to be enabled for  something like forwarding network ports froma remoteb host to your local machine;
for instance, if you want to access a service on the host (or host's network) that is blocked by a firewall. If you need these optional 
features enabled, turn them on in the sshd_config file.


API Keys
An Application Programming Interface (API) key is an authentication token that allows you to call  an API. An appication passes an
API key to the API, which is then called to identify the person, programmer, or program trying to access a website. It is frequently
accompanied by a set of access rights that are speicirfc to the API key is linked to. In this reading, you will delve into API keys,
their role, their function in aurthentication and authorixation and how they are used.
The API key is usually randomly generated by the application and must by sent on every application call. It serves as a distinctive
identifier and offers a secure token for authentication.

Authentication and authorization

API keys may be used for both the authentication ,  making sure your're who you say you are, and authorization deciding which APIs
you are allowed to call.

When you are authenticating with API keys, you are ensuring that malicious users or applications can't call an API and make unauthorized
authorized changes. With project authentication (application or site authentication), API keys help identify the project or application 
that makes the call. If you are using API keys for user authentication,, the idenity of the user is being verified.

When you are authorizing with API keys, you are also ensuring that you have the correct API call. Authorization will also check that the
API key being used in the project is available.

HOW they are used

When using APIs , the usage depends on the specific API, With most APIs , you are required to send the API key with every request. It can
happen in one of several ways:

One last tip, do not hardcode API keys intoyour application especially if it will be posted in a public repository like Github. If you 
have hardcoded your API keys into your appplicaton code anyone who wants to can make API calls with your authorixation!

Unfortunatelu, it happens everyday. For this reason many applications are moving away from API keys and toard OAuth, which requires the 
user to manually authroize an application before using it. WIth being extra cautious, you can make sure this doesnt happen to youu.

Key takeaways

*API keys faciitate secure interactuiohns: The API key serves as a crucial authentication token that not only permits API calls,
but also plays a vital role in regulating access privileges and defining permissible actions.Its an essential tool in ensuring secure and
controlled communication within digital ecosystems.

*Authentication and authorization: API keys serve a dual purpose: authentication and authorization. Authentication verifies the identity
of the users or applications making API calls,  preventing unauthorized access or changes. Authorixation, on the other hand, ensures that
users have the appropriate rights to call speicific APIs,  promoting controlled usage and adherence to access policies.

*Effective API key usage: When using APIs, the API key can be included as an HTTP parameterin the URL or an HTTP header. Ensuring that
API keys aren't hardcoded in the application code is important in order to prevent unauthorized access. Many applications are transitioning
from API keys to more secure methods where mutual user authorization enhances security measures and minimizes risks  associated with API
misuse.

When to use API keys

Managing access and safeguarding resources is where API keys come into play. An API may require keys for part or all of its methods.
In this reading, we delve into the conecpt of API keys, exploring their pivotal role in not only securing and controlling, but also in
gathering insights to some processes API keys should not be used for.

There are a few reasons why you might want to use API  keys.
What you can use API keys for

Some of the ways you might use API keys  include:
*To block anonymous traffic - Can help protrect your API from abuse and to ensure that only authorized users are able to access it.
*To control the number of calls made to your API-
Can help prevent your API from being overloaded and to  ensure that it is available to  all authorized users,
*To identify usage patterns- Can be used to improve your API and to make sure that it is meeting the needs of your users.
*To filter logs by API keys- Can help you to troubleshoot problems with your API andto identify which users are using your API and the most.

WHat you can not use API keys for-

You can't use API keys for :

*Identifying individual users- API keys do not identify users; they identify entire projects.

*Secure authorization- They shoudl be used only to identify and control  access to an API.

*Identifying the creators of a project- Service infrastructure doesn'r provide a methodto directly look up  projects from API keys.

Key Takeaways

*You use API keys for blocking anonymous traffic, controlling the number of calls made to your API, identifying usage patterns, and 
to filter logs by API keys.

*You can't use API keys for identifying individual users, securin authorization, and identifying the creators of a project.

API keys serve as the link between the potential of APIs and the demand for restricted usage. As developers continue to harness the power
of APIs to weave intricate software ecosystems, a nuanced understanding of API key's capabilities and boundaries becomes tje cornerstone
of ensuring secure efficient and insightful API management.


Public and Private Keys

In a rapidly evolving world of technology,it is more critical than ever to establish security policies throughout an organization that
safeguard valuable information and data assets. Assymetric cryptography relies on public and private keys as its core building blocks to 
maintain data security and confidentiality in the face of dangers. However to enable  organizations to make wise deciisons that will
protect online transactions and information,  it is important that we understand when public and privte keys are used and how to do  so
effectively.

What is Public Key?
A public key is frequently employed to etablish secure communiication through data encryption or to validate the authenticity of a digital
signature. Safety is  ensured because the public key comes from a trusted certified authority, which gives digital certificates verifying
the owner's  identity and key. Public keys are created through an assymetric algorithm that conducts several operations before beiing transmitted over the internet.

What is private key?

A private key is a secret and secure key that must be kept confidential and protected.Its role involves decryption and the creation
of digital signatures, assuring the data's integrity and authenticity. It is the counterpart of the public key and is shared to decrypt 
encoded information. Any data encrypted using the private key can be decrypted usinh the corresponding public key.

How do public and private keys work together?

Public and private keys work together to ensure secure communication, data encryption,  digital signatures and key exchanges take place
securely and safely across various communication channcels. This process encompassses:

1. Key generation: A public and private key is generated for both the sender and reciever.
2. Key exchange: The publci keys are exchanged between sender and reciever.
3. Encryption: The sender encrypts their data using the recipient's public key.
4. Transmittng encrypted data: The encrypted data is transmitted to the recipient.
5. Decryption: The recipient decrypts the message using their exclusive private key.


Key Takeaways:

In summary, although public and private keys are distinct, they work together to create a powerful and flexible foundation for 
achieving data security, confidentiality, integrity, and authentication in a wide range of digital settings.




